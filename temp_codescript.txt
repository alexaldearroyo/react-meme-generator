// src/App.js:

// src/App.js:

import './App.css';
import React, { useEffect, useState } from 'react';
import ActionsContainer from './ActionsContainer';
import MemeDisplay from './MemeDisplay';

function App() {
  const [showImage, setShowImage] = useState(true);
  const [imageUrl, setImageUrl] = useState(
    'https://api.memegen.link/images/doge/Hello/World.png',
  );
  const [errorMessage, setErrorMessage] = useState('');
  const [templates, setTemplates] = useState([]);

  useEffect(() => {
    fetch('https://api.memegen.link/templates/')
      .then((response) => response.json())
      .then((data) => {
        const templateNames = data.map((template) => template.id);
        setTemplates(templateNames);
      })
      .catch((error) => {
        console.error('Error fetching templates:', error);
      });
  }, []);

  const handleShowImage = (templateName, topText = '_', bottomText = '_') => {
    if (templates.includes(templateName)) {
      const top = topText.trim() === '' ? '_' : encodeURIComponent(topText);
      const bottom =
        bottomText.trim() === '' ? '_' : encodeURIComponent(bottomText);
      setImageUrl(
        `https://api.memegen.link/images/${String(templateName)}/${String(top)}/${String(bottom)}.png`,
      );
      setShowImage(true);
      setErrorMessage('');
    } else {
      setShowImage(false);
      setErrorMessage('Template id not found');
    }
  };

  return (
    <div className="App">
      <div className="container">
        <MemeDisplay
          showImage={showImage}
          imageUrl={imageUrl}
          errorMessage={errorMessage}
        />
        <ActionsContainer setShowImage={handleShowImage} imageUrl={imageUrl} />
      </div>
    </div>
  );
}

export default App;

----------------------------------------

// src/ActionsContainer.js:

// src/ActionsContainer.js

import './ActionsContainer.css';
import React, { useState } from 'react';
import TemplateSelector from './TemplateSelector';
import TextGenerator from './TextGenerator';

const ActionsContainer = ({ setShowImage, imageUrl }) => {
  const [inputText, setInputText] = useState('');
  const [topText, setTopText] = useState('');
  const [bottomText, setBottomText] = useState('');

  const handleInputChange = (e) => {
    setInputText(e.target.value);
  };

  const handleTopTextChange = (e) => {
    setTopText(e.target.value);
  };

  const handleBottomTextChange = (e) => {
    setBottomText(e.target.value);
  };

  const handleButtonClick = () => {
    setShowImage(inputText, topText, bottomText);
  };

  const handleDownloadClick = async () => {
    if (!imageUrl) return;

    try {
      const response = await fetch(imageUrl);
      if (!response.ok) {
        throw new Error('Failed to fetch image');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);

      const link = document.createElement('a');
      link.href = url;
      link.download = 'meme.png';
      link.style.display = 'none';

      document.body.appendChild(link);
      link.click();

      // Revoke the temporary URL after download to avoid memory leaks
      window.URL.revokeObjectURL(url);
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error downloading image:', error);
    }
  };

  return (
    <div className="actions-container">
      <TemplateSelector
        inputText={inputText}
        handleInputChange={handleInputChange}
        handleButtonClick={handleButtonClick}
      />
      <TextGenerator
        topText={topText}
        handleTopTextChange={handleTopTextChange}
        bottomText={bottomText}
        handleBottomTextChange={handleBottomTextChange}
        handleGenerateClick={handleButtonClick}
        handleDownloadClick={handleDownloadClick}
        imageUrl={imageUrl}
      />
    </div>
  );
};

export default ActionsContainer;

----------------------------------------

// src/TextGenerator.js:

// src/TextGenerator.js

import './TextGenerator.css';
import React from 'react';

const TopTextRow = ({ topText, handleTopTextChange }) => {
  return (
    <div className="top-text-container">
      <label htmlFor="top-text" className="top-text-label">
        Top text
      </label>
      <input
        id="top-text"
        placeholder="Enter top text"
        value={topText}
        onChange={handleTopTextChange}
      />
    </div>
  );
};

const BottomTextRow = ({ bottomText, handleBottomTextChange }) => {
  return (
    <div className="bottom-text-container">
      <label htmlFor="bottom-text" className="bottom-text-label">
        Bottom text
      </label>
      <input
        id="bottom-text"
        placeholder="Enter bottom text"
        value={bottomText}
        onChange={handleBottomTextChange}
      />
    </div>
  );
};

const TextGenerator = ({
  topText,
  handleTopTextChange,
  bottomText,
  handleBottomTextChange,
  handleGenerateClick,
  handleDownloadClick,
  imageUrl,
}) => {
  return (
    <div className="text-generator-container common-width">
      <TopTextRow topText={topText} handleTopTextChange={handleTopTextChange} />
      <BottomTextRow
        bottomText={bottomText}
        handleBottomTextChange={handleBottomTextChange}
      />
      <div className="button-container">
        <button
          className="text-button"
          onClick={handleGenerateClick}
          data-test-id="generate-meme"
        >
          Generate
        </button>
        <button
          className="text-button"
          onClick={() => handleDownloadClick(imageUrl)}
        >
          Download
        </button>
      </div>
    </div>
  );
};

export default TextGenerator;

----------------------------------------

