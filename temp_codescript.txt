// src/ActionsContainer.css:

.actions-container {
  width: 80%;
  border: 1px solid #ccc;
  border-radius: 8px;
  padding: 20px;
  margin: 20px auto;
  position: relative;
}

.template-selector {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
  width: 100%;
}

.selector-text {
  flex-grow: 1;
  padding: 10px;
  font-size: 1em;
}

.selector-button {
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.selector-button:hover {
  background-color: #0056b3;
}

.text-generator-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
}

.top-text-container,
.bottom-text-container {
  display: flex;
  gap: 10px;
  margin: 10px 0;
  width: 100%;
}

.top-text-container input,
.bottom-text-container input {
  flex-grow: 1;
  padding: 10px;
  font-size: 1em;
}

.text-button {
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.text-button:hover {
  background-color: #0056b3;
}

----------------------------------------

// src/ActionsContainer.js:

import './ActionsContainer.css';
import React, { useEffect, useState } from 'react';
import TemplateSelector from './TemplateSelector';
import TextGenerator from './TextGenerator';

const ActionsContainer = ({ setShowImage, imageUrl }) => {
  const [inputText, setInputText] = useState('doge');
  const [topText, setTopText] = useState('Hello');
  const [bottomText, setBottomText] = useState('World');

  useEffect(() => {
    setShowImage(inputText, topText, bottomText);
  }, [inputText, topText, bottomText, setShowImage]);

  const handleDownloadClick = async () => {
    if (!imageUrl) return;

    try {
      const response = await fetch(imageUrl);
      if (!response.ok) {
        throw new Error('Failed to fetch image');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);

      const link = document.createElement('a');
      link.href = url;
      link.download = 'meme.png';
      link.style.display = 'none';

      document.body.appendChild(link);
      link.click();

      window.URL.revokeObjectURL(url);
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error downloading image:', error);
    }
  };

  const handleButtonClick = () => {
    const encodedTopText = encodeURIComponent(topText);
    const encodedBottomText = encodeURIComponent(bottomText);
    setShowImage(inputText, encodedTopText, encodedBottomText);
  };

  return (
    <div className="actions-container">
      <TemplateSelector handleButtonClick={(text) => setInputText(text)} />
      <TextGenerator
        topText={topText}
        handleTopTextChange={(e) => setTopText(e.target.value)}
        bottomText={bottomText}
        handleBottomTextChange={(e) => setBottomText(e.target.value)}
        handleGenerateClick={handleButtonClick}
        handleDownloadClick={handleDownloadClick}
        imageUrl={imageUrl}
      />
    </div>
  );
};

export default ActionsContainer;

----------------------------------------

// src/App.css:

.container {
  margin-top: 20px; /* Add some margin if needed */
  width: 100%; /* Ensure full width */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
}

.meme-display {
  margin-top: 20px; /* Add some margin if needed */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: auto; /* Changed from fixed height */
  margin-bottom: 20px;
}

.meme-image {
  width: auto;
  height: 300px;
  border-radius: 10px;
}

.error-message {
  color: red;
  font-size: 1.2em;
  margin-top: 20px;
}

/* Adjust ActionsContainer positioning */
.actions-container {
  margin-top: 50px; /* Increase the margin to push it further down */
}

----------------------------------------

// src/App.js:

import './App.css';
import React, { useEffect, useState } from 'react';
import ActionsContainer from './ActionsContainer';
import MemeDisplay from './MemeDisplay';

function App() {
  // Component States
  const [showImage, setShowImage] = useState(true);
  const [imageUrl, setImageUrl] = useState(
    'https://api.memegen.link/images/doge/Hello/World.png',
  );
  const [errorMessage, setErrorMessage] = useState('');
  const [templates, setTemplates] = useState([]);

  // Effect for fetching meme templates
  useEffect(() => {
    fetch('https://api.memegen.link/templates/')
      .then((response) => response.json())
      .then((data) => {
        const templateNames = data.map((template) => template.id);
        setTemplates(templateNames);
      })
      .catch((error) => {
        console.error('Error fetching templates:', error);
      });
  }, []);

  // Show Meme Image
  const handleShowImage = (templateName, topText, bottomText) => {
    if (templates.includes(templateName)) {
      const newImageUrl = `https://api.memegen.link/images/${templateName}/${topText}/${bottomText}.png`; // URL interpolation
      setImageUrl(newImageUrl);
      setShowImage(true);
      setErrorMessage('');
    } else {
      setShowImage(false);
      setErrorMessage('Template id not found');
    }
  };

  return (
    <div className="App">
      <div className="container">
        <MemeDisplay
          showImage={showImage}
          imageUrl={imageUrl}
          errorMessage={errorMessage}
        />
        <ActionsContainer setShowImage={handleShowImage} imageUrl={imageUrl} />
      </div>
    </div>
  );
}

export default App;

----------------------------------------

// src/App.test.js:

import { expect, test } from '@jest/globals';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

----------------------------------------

// src/MemeDisplay.css:

.meme-image {
  width: auto;
  height: 300px;
  border-radius: 10px;
}

.error-message {
  color: red;
  font-size: 1.2em;
  margin-top: 20px;
}

----------------------------------------

// src/MemeDisplay.js:

import './MemeDisplay.css';
import React from 'react';

const MemeDisplay = ({ showImage, imageUrl, errorMessage }) => (
  <div className="meme-display">
    {showImage && (
      <img
        className="meme-image"
        src={String(imageUrl)}
        alt={`${String(imageUrl)} meme`}
        data-test-id="meme-image"
      />
    )}
    {Boolean(errorMessage) && (
      <div className="error-message">{errorMessage}</div>
    )}
  </div>
);

export default MemeDisplay;

----------------------------------------

// src/TemplateSelector.css:

.template-selector-container {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 20px;
  width: 100%;
}

.template-label {
  font-size: 1em;
  font-weight: bold;
  margin-bottom: 5px;
}

.template-selector {
  display: flex;
  gap: 10px; /* Space between input and button */
  width: 100%;
}

----------------------------------------

// src/TemplateSelector.js:

import './TemplateSelector.css';
import React, { useState } from 'react';

const SelectorText = ({ value, onChange, onKeyDown }) => {
  return (
    <input
      className="selector-text"
      placeholder="Enter Template ID"
      value={value}
      onChange={onChange}
      onKeyDown={onKeyDown}
    />
  );
};

const SelectorButton = ({ onClick }) => {
  return (
    <button className="selector-button" onClick={onClick}>
      Show Template
    </button>
  );
};

const TemplateSelector = ({ handleButtonClick }) => {
  const [inputText, setInputText] = useState(''); // Estado para almacenar el texto ingresado

  const handleKeyDown = (event) => {
    if (event.key === 'Enter') {
      handleButtonClick(inputText); // Llama a handleButtonClick con el texto ingresado si la tecla presionada es Enter
    }
  };

  const handleInputChange = (event) => {
    setInputText(event.target.value); // Actualiza el estado con el texto ingresado
  };

  return (
    <div className="template-selector-container">
      <label htmlFor="template-id" className="template-label">
        Meme template
      </label>
      <div className="template-selector common-width">
        <SelectorText
          value={inputText}
          onChange={handleInputChange}
          onKeyDown={handleKeyDown} // Cambiamos el evento a onKeyDown
        />
        <SelectorButton onClick={() => handleButtonClick(inputText)} />{' '}
        {/* Llama a handleButtonClick con el texto ingresado al hacer clic en el bot√≥n */}
      </div>
    </div>
  );
};

export default TemplateSelector;

----------------------------------------

// src/TextGenerator.css:

.text-generator-container {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.top-text-container,
.bottom-text-container {
  flex-grow: 1;
  margin: 10px;
  font-size: 1em;
}

.text-button {
  margin-left: 10px;
  padding: 5px 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.text-button:hover {
  background-color: #0056b3;
}

----------------------------------------

// src/TextGenerator.js:

// src/TextGenerator.js

import './TextGenerator.css';
import React from 'react';

const TextRow = ({ label, id, value, handleChange }) => (
  <div className={`${id}-container`}>
    <label htmlFor={id} className={`${id}-label`}>
      {label}
    </label>
    <input
      id={id}
      placeholder={`Enter ${label.toLowerCase()}`}
      value={value}
      onChange={handleChange}
    />
  </div>
);

const TextGenerator = ({
  topText,
  handleTopTextChange,
  bottomText,
  handleBottomTextChange,
  handleGenerateClick,
  handleDownloadClick,
  // imageUrl,
}) => {
  return (
    <div className="text-generator-container common-width">
      <TextRow
        label="Top text"
        id="top-text"
        value={topText}
        handleChange={handleTopTextChange}
      />
      <TextRow
        label="Bottom text"
        id="bottom-text"
        value={bottomText}
        handleChange={handleBottomTextChange}
      />
      <div className="button-container">
        <button className="text-button" onClick={handleGenerateClick}>
          Generate
        </button>
        <button className="text-button" onClick={handleDownloadClick}>
          Download
        </button>
      </div>
    </div>
  );
};

export default TextGenerator;

----------------------------------------

// src/index.css:

body,
html {
  background-color: white;
  margin: 0;
  padding: 0;
  height: 100%;
  overflow: hidden;
  font-family: Arial, sans-serif;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

----------------------------------------

// src/index.js:

import './index.css';
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);

----------------------------------------

// src/logo.svg:

<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
----------------------------------------

// src/setupTests.js:

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

----------------------------------------

